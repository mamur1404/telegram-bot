require('dotenv').config();
const puppeteer = require('puppeteer');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

const {
    LOGIN,
    PASSWORD,
    TELEGRAM_TOKEN,
    TELEGRAM_CHAT_ID
} = process.env;

const LOGIN_URL = 'https://megawatt.charging123.com/admin/login';
const LIST_URL = 'https://megawatt.charging123.com/admin/charge-boxes';
const SENT_FILE = path.join(__dirname, 'sent_stations.json');
const INTERVAL_MS = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

function sleep(ms) {
    return new Promise(r => setTimeout(r, ms));
}

// --- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º ---
function loadSentStations() {
    try {
        const raw = fs.readFileSync(SENT_FILE, 'utf8');
        // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º (trim) —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        return JSON.parse(raw).map(s => s.trim());
    } catch {
        return [];
    }
}

function saveSentStations(arr) {
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —á–∏—Å—Ç—ã–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    fs.writeFileSync(SENT_FILE, JSON.stringify(arr, null, 2), 'utf8');
}

// --- Telegram ---
async function sendTelegram(text) {
    try {
        await axios.post(
            `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`,
            { chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'Markdown' }
        );
    } catch (e) {
        console.error('‚ùå Telegram:', e.message);
    }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
async function authAndCheck() {
    const sentStations = loadSentStations();
    console.log('üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ JSON:', sentStations.length, '—Å—Ç–∞–Ω—Ü–∏–π');

    const isHeadless = process.env.HEADLESS !== 'false'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

    const browser = await puppeteer.launch({
        headless: isHeadless,
        slowMo: 10,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--disable-blink-features=AutomationControlled'
        ]
    });

    const page = await browser.newPage();
    await page.setUserAgent(
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/114 Safari/537.36'
    );

    // –ª–æ–≥–∏–Ω–∏–º—Å—è
    console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–≥–∏–Ω...');
    await page.goto(LOGIN_URL, { waitUntil: 'networkidle2', timeout: 60000 });
    await page.waitForSelector('input[type="email"], input[name="username"]', { timeout: 30000 });
    await page.type('input[type="email"], input[name="username"]', LOGIN, { delay: 50 });
    await page.keyboard.press('Enter');
    await page.waitForSelector('input[type="password"]', { timeout: 30000 });
    await page.type('input[type="password"]', PASSWORD, { delay: 50 });
    await page.keyboard.press('Enter');
    await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 60000 });
    console.log('‚úÖ –ó–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å');

    // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ø–∏—Å–æ–∫
    await page.goto(LIST_URL, { waitUntil: 'networkidle2', timeout: 60000 });

    let pageNum = 1;
    while (true) {
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}...`);
        await page.waitForSelector('table tbody tr', { timeout: 20000 });

        // —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
        const rows = await page.$$eval('table tbody tr', trs =>
            trs.map(tr => {
                const cols = tr.querySelectorAll('td');
                return {
                    name: cols[1]?.innerText.trim(),
                    partner: cols[2]?.innerText.trim(),
                    status: cols[3]?.innerText.trim().toLowerCase(),
                    time: cols[7]?.innerText.trim()
                };
            })
        );

        // --- 1) ONLINE ‚Üí –µ—Å–ª–∏ –±—ã–ª–∞ –≤ sentStations ‚Üí —É–≤–µ–¥–æ–º–ª—è–µ–º –∑–µ–ª—ë–Ω—ã–º + —É–¥–∞–ª—è–µ–º ---
        for (const st of rows.filter(r => r.status === 'online' || r.status === 'active')) {
            const name = st.name.trim();
            const idx = sentStations.indexOf(name);
            if (idx !== -1) {
                const msg =
                    'üü¢ *–°—Ç–∞–Ω—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞—Å—å ONLINE* üü¢\n\n' +
                    `*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${name}\n` +
                    `*–ü–∞—Ä—Ç–Ω—ë—Ä:* ${st.partner}\n` +
                    `*–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:* ${st.time}`;
                await sendTelegram(msg);
                sentStations.splice(idx, 1);
                console.log('üü¢ –£–¥–∞–ª–∏–ª–∏ –∏–∑ JSON:', name);
                await sleep(500);
            }
        }

        // --- 2) OFFLINE ‚Üí –µ—Å–ª–∏ –Ω–µ—Ç –≤ sentStations ‚Üí —É–≤–µ–¥–æ–º–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–º + –¥–æ–±–∞–≤–ª—è–µ–º ---
        for (const st of rows.filter(r => r.status === 'offline')) {
            const name = st.name.trim();
            if (!sentStations.includes(name)) {
                const msg =
                    '‚ö†Ô∏è *–°–¢–ê–ù–¶–ò–Ø –í–´–®–õ–ê OFFLINE* ‚ö†Ô∏è\n\n' +
                    `*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${name}\n` +
                    `*–ü–∞—Ä—Ç–Ω—ë—Ä:* ${st.partner}\n` +
                    `*–í—Ä–µ–º—è –≤—ã–ª–µ—Ç–∞:* ${st.time}`;
                await sendTelegram(msg);
                sentStations.push(name);
                console.log('‚ö†Ô∏è –î–æ–±–∞–≤–∏–ª–∏ –≤ JSON:', name);
                await sleep(500);
            }
        }

        // –ø–∞–≥–∏–Ω–∞—Ü–∏—è
        const nextBtn = await page.$('ul.pagination li:last-child:not(.disabled) a');
        if (!nextBtn) break;
        await nextBtn.click();
        await page.waitForTimeout(2000);
        pageNum++;
    }

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    saveSentStations(sentStations);
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í JSON —Å–µ–π—á–∞—Å:', sentStations.length, '—Å—Ç–∞–Ω—Ü–∏–π');

    await browser.close();
}

// --- –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ---
(async () => {
    while (true) {
        console.log(`üïê –°—Ç–∞—Ä—Ç: ${new Date().toLocaleString()}`);
        await authAndCheck();
        console.log(`‚è≥ –ñ–¥—ë–º ${INTERVAL_MS / 60000} –º–∏–Ω...`);
        await sleep(INTERVAL_MS);
    }
})();
